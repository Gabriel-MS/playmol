diff -wrupN original/initial.f90 packmol/initial.f90
--- original/initial.f90	2015-06-27 14:25:55.000000000 -0300
+++ packmol/initial.f90	2016-05-03 13:05:03.393507898 -0300
@@ -15,7 +15,7 @@
 
 subroutine initial(isem,randini,x,n,ntfix,fix,&
                    moldy,chkgrad,nloop,discale,precision,sidemax,&
-                   movefrac,movebadrandom,check)
+                   movefrac,movebadrandom,check,quit)
 
   use sizes
   use molpa
@@ -33,7 +33,9 @@ subroutine initial(isem,randini,x,n,ntfi
      
   logical :: fix, randini, moldy, chkgrad, &
              hasfixed(0:nbp+1,0:nbp+1,0:nbp+1), &
-             overlap, movebadprint, hasbad, check, movebadrandom
+             overlap, movebadprint, hasbad, check, movebadrandom, quit
+
+  quit = .false.
 
   ! We need to initialize the move logical variable
 
@@ -134,7 +136,8 @@ subroutine initial(isem,randini,x,n,ntfi
       nboxes(i) = nb
     end do
     call compgrad(n,x)
-    stop
+    quit = .true.
+    return
   end if
 
   ! Performing some steps of optimization for the restrictions only
@@ -176,7 +179,8 @@ subroutine initial(isem,randini,x,n,ntfi
     end if
       write(*,*) ' >The maximum number of cycles (',nloop,') was achieved.' 
       write(*,*) '  You may try increasing it with the',' nloop keyword, as in: nloop 1000 '
-    stop
+    quit = .true.
+    return
   end if
 
   ! Rescaling sizemin and sizemax in order to build the patch of boxes
diff -wrupN original/io.f90 packmol/io.f90
--- original/io.f90	2015-10-14 06:48:07.000000000 -0300
+++ packmol/io.f90	2016-05-03 13:06:51.833505956 -0300
@@ -14,7 +14,7 @@
 !
 !
 
-subroutine getinp(dism,precision,sidemax,&
+subroutine getinp(unit,dism,precision,sidemax,&
                   ntype,nlines,nrest,&
                   natoms,idfirst,nconnect,maxcon,nmols,&
                   isem,&
@@ -36,7 +36,7 @@ subroutine getinp(dism,precision,sidemax
                       discale, movefrac, precision, add_sides_fix,&
                       sidemax
 
-  integer :: i, j, k, ii, iarg, iline, nlines, idatom, iatom,&
+  integer :: unit, i, j, k, ii, iarg, iline, nlines, idatom, iatom,&
              in, lixo, irest, itype, itest, isem, imark, ntype, nrest,&
              nmols(maxtype), natoms(maxtype), idfirst(maxtype),&
              ityperest(maxrest), irestline(maxrest),&
@@ -47,7 +47,7 @@ subroutine getinp(dism,precision,sidemax
   character(len=200) :: inputfile(maxlines), keyword(maxlines,maxkeywords),&
                         record, blank, xyzout, name(maxtype)
   character(len=80) :: pdbfile(maxtype)
-  character(len=3) :: ele(maxatom)
+  character(len=30) :: ele(maxatom)
 
   logical :: tinker,pdb,xyz,moldy, ignore, randini, check, &
              chkgrad, writebad, add_amber_ter, add_box_sides, &
@@ -76,7 +76,7 @@ subroutine getinp(dism,precision,sidemax
   write(*,*) ' Reading input file... (Control-C aborts)'
   nlines = 0
   do while (.true.)
-    read(5,"( a200 )",iostat=ioerr) record
+    read(unit,"( a200 )",iostat=ioerr) record
     if ( ioerr /= 0 ) exit
 
     ! Checking if the line is empty or if it is a commentary
@@ -879,7 +879,7 @@ subroutine output(x,amass,&
   character :: chain, even_chain, odd_chain
   character(len=200) :: record
   character(len=64) :: title
-  character(len=3) :: ele(maxatom)
+  character(len=30) :: ele(maxatom)
   character(len=200) :: name(maxtype)
   character(len=80) :: pdbfile(maxtype), pdb_atom_line, pdb_hetatm_line,&
                        tinker_atom_line
@@ -899,7 +899,7 @@ subroutine output(x,amass,&
   if(xyz) then
     open(30,file=xyzout,status='unknown') 
     write(30,*) ntotat
-    write(30,*) title 
+    write(30,'("#",A)') trim(title)
     ilubar = 0 
     ilugan = ntotmol*3 
     icart = natfix
@@ -925,7 +925,7 @@ subroutine output(x,amass,&
                           coor(idatom,1),coor(idatom,2),&
                           coor(idatom,3),&
                           v1,v2,v3) 
-            write(30,"( tr2,a3,tr2,3(tr2,f14.6) )") ele(idatom), (xcart(icart, k), k = 1, 3)
+            write(30,'(A,3(tr2,f14.6))') trim(ele(idatom)), (xcart(icart, k), k = 1, 3)
           end do 
           ilugan = ilugan + 3 
           ilubar = ilubar + 3 
@@ -935,7 +935,7 @@ subroutine output(x,amass,&
         idatom = idfirst(i_fixed) - 1
         do iatom = 1, natoms(i_fixed)
           idatom = idatom + 1
-          write(30,"( tr2,a3,tr2,3(tr2,f14.6) )") ele(idatom), (coor(idatom,k),k=1,3)
+          write(30,'(A,3(tr2,f14.6))') trim(ele(idatom)), (coor(idatom,k),k=1,3)
         end do
       end if
     end do
@@ -1541,7 +1541,7 @@ subroutine checkpoint(n,x,amass,&
   integer :: nloop, isem
   integer :: input_itype(maxtype)
 
-  character(len=3) :: ele(maxatom)
+  character(len=30) :: ele(maxatom)
   character(len=80) :: pdbfile(maxtype) 
   character(len=200) :: xyzout
   character(len=200) :: name(maxtype)
diff -wrupN original/main.f90 packmol/main.f90
--- original/main.f90	1969-12-31 21:00:00.000000000 -0300
+++ packmol/main.f90	2016-05-03 13:05:03.393507898 -0300
@@ -0,0 +1,4 @@
+program main
+integer :: stat
+call packmol( 5, stat )
+end program main
diff -wrupN original/Makefile packmol/Makefile
--- original/Makefile	2015-06-27 14:25:50.000000000 -0300
+++ packmol/Makefile	2016-05-03 13:05:03.393507898 -0300
@@ -14,6 +14,10 @@
 #
 # The default compilation compiles only the serial version of packmol.
 #
+# If you want to compile the serial static library version, type
+#
+#          make lib
+#
 # If you want to compile with some specific fortran compiler, or
 # to enable the parallel implementation, you must change the line
 # below to the path of your fortran compiler. The parallel version
@@ -52,7 +56,7 @@ endif
 #
 # Files required
 #
-oall = cenmass.o \
+olib = cenmass.o \
        gencan.o \
        pgencan.o \
        initial.o \
@@ -64,6 +68,7 @@ oall = cenmass.o \
        sizes.o \
        usegencan.o \
        molpa.o
+oall = $(olib) main.o
 oserial = feasy.o geasy.o
 oparallel = feasyparallel.o geasyparallel.o compindexes.o
 #
@@ -75,11 +80,22 @@ serial : $(oall) $(oserial)
 	@echo " Flags: $(FLAGS) " 
 	@echo " ------------------------------------------------------ " 
 	@$(FORTRAN) -o packmol $(oall) $(oserial) $(FLAGS) 
-	@\rm -f *.mod *.o
 	@echo " ------------------------------------------------------ " 
 	@echo " Packmol succesfully built." 
 	@echo " ------------------------------------------------------ " 
 #
+# Linking the serial static library version
+#
+lib : $(olib) $(oserial)
+	@echo " ------------------------------------------------------ " 
+	@echo " Compiling packmol with $(FORTRAN) " 
+	@echo " Flags: $(FLAGS) " 
+	@echo " ------------------------------------------------------ " 
+	@ar cr libpackmol.a $(olib) $(oserial)
+	@echo " ------------------------------------------------------ " 
+	@echo " Packmol succesfully built. Static library available. " 
+	@echo " ------------------------------------------------------ " 
+#
 # Linking the parallel version
 #
 parallel : $(oall) $(oparallel) ppackmol
@@ -89,7 +105,6 @@ parallel : $(oall) $(oparallel) ppackmol
 	@echo " ------------------------------------------------------ "
 	@$(FORTRAN) -o packmol $(oall) $(oparallel) $(FLAGS) $(OPENMPFLAGS) 
 	@chmod +x ppackmol
-	@\rm -f *.mod *.o
 	@echo " ------------------------------------------------------ " 
 	@echo " Packmol succesfully built. Paralell version available. " 
 	@echo " ------------------------------------------------------ " 
@@ -118,6 +133,8 @@ usegencan.o : usegencan.f90
 #
 # Code compiled only for all versions
 #
+main.o : main.f90 packmol.o $(modules)
+	@$(FORTRAN) $(FLAGS) -c main.f90
 cenmass.o : cenmass.f90 $(modules)
 	@$(FORTRAN) $(FLAGS) -c cenmass.f90
 initial.o : initial.f90 $(modules)
diff -wrupN original/Makefile.default packmol/Makefile.default
--- original/Makefile.default	2015-06-27 14:25:56.000000000 -0300
+++ packmol/Makefile.default	2016-05-03 13:05:03.393507898 -0300
@@ -13,6 +13,10 @@
 #
 # The default compilation compiles only the serial version of packmol.
 #
+# If you want to compile the serial static library version, type
+#
+#          make lib
+#
 # If you want to compile with some specific fortran compiler, or
 # to enable the parallel implementation, you must change the line
 # below to the path of your fortran compiler. The parallel version
@@ -51,7 +55,7 @@ endif
 #
 # Files required
 #
-oall = cenmass.o \
+olib = cenmass.o \
        gencan.o \
        pgencan.o \
        initial.o \
@@ -63,6 +67,7 @@ oall = cenmass.o \
        sizes.o \
        usegencan.o \
        molpa.o
+oall = $(olib) main.o
 oserial = feasy.o geasy.o
 oparallel = feasyparallel.o geasyparallel.o compindexes.o
 
@@ -75,11 +80,22 @@ serial : $(oall) $(oserial)
 	@echo " Flags: $(FLAGS) " 
 	@echo " ------------------------------------------------------ " 
 	@$(FORTRAN) -o packmol $(oall) $(oserial) $(FLAGS) 
-	@\rm -f *.mod *.o
 	@echo " ------------------------------------------------------ " 
 	@echo " Packmol succesfully built." 
 	@echo " ------------------------------------------------------ " 
 #
+# Linking the serial static library version
+#
+lib : $(olib) $(oserial)
+	@echo " ------------------------------------------------------ " 
+	@echo " Compiling packmol with $(FORTRAN) " 
+	@echo " Flags: $(FLAGS) " 
+	@echo " ------------------------------------------------------ " 
+	@ar cr libpackmol.a $(olib) $(oserial)
+	@echo " ------------------------------------------------------ " 
+	@echo " Packmol succesfully built. Static library available. " 
+	@echo " ------------------------------------------------------ " 
+#
 # Linking the parallel version
 #
 parallel : $(oall) $(oparallel) ppackmol
@@ -89,7 +105,6 @@ parallel : $(oall) $(oparallel) ppackmol
 	@echo " ------------------------------------------------------ "
 	@$(FORTRAN) -o packmol $(oall) $(oparallel) $(FLAGS) $(OPENMPFLAGS) 
 	@chmod +x ppackmol
-	@\rm -f *.mod *.o
 	@echo " ------------------------------------------------------ " 
 	@echo " Packmol succesfully built. Paralell version available. " 
 	@echo " ------------------------------------------------------ " 
@@ -126,6 +141,9 @@ usegencan.o : usegencan.f90
 # Code compiled only for all versions
 #
 
+main.o : main.f90 packmol.o $(modules)
+	@$(FORTRAN) $(FLAGS) -c main.f90
+
 cenmass.o : cenmass.f90 $(modules)
 	@$(FORTRAN) $(FLAGS) -c cenmass.f90
 
Binary files original/packmol and packmol/packmol differ
diff -wrupN original/packmol.f90 packmol/packmol.f90
--- original/packmol.f90	2015-10-14 06:48:30.000000000 -0300
+++ packmol/packmol.f90	2016-05-03 13:05:03.393507898 -0300
@@ -39,13 +39,28 @@
 !
 !
 
-program packmol
+subroutine packmol( unit, stat )
+
+!     Returned stat values:
+!
+!     0 - Mission accomplished.
+!     1 - Maximum loops achieved -> best solution written to output file.
+!     2 - Analytical and finite-difference gradients comparison carried out.
+!     3 - Unable to put the molecules in the desired regions.
+!     4 - Number of some fixed molecule is greater than one -> Aborted.
+!     5 - Some molecule has no geometrical restriction defined -> Aborted.
+!     6 - Total number of atoms greater than maxatom -> Aborted.
+!     7 - Could not read radius from keyword -> Aborted.
+!     8 - Atom selection with index greater than number of atoms in structure -> Aborted.
 
   use sizes
   use molpa
   use usegencan
   implicit none
 
+  integer, intent(in)  :: unit
+  integer, intent(out) :: stat
+
   integer :: irestline(maxrest)
   integer :: linestrut(maxtype,2)
   integer :: itype, nrest, irest, idatom, iatom
@@ -81,14 +96,14 @@ program packmol
   character(len=200) :: record
   character(len=200) :: name(maxtype)
   character(len=80) :: pdbfile(maxtype), xyzfile
-  character(len=3) :: ele(maxatom)
+  character(len=30) :: ele(maxatom)
   character(len=200) :: xyzout        
   character(len=80) :: dash1_line
 
   logical :: fix,fixed(maxtype),fixtmp,randini,check,chkgrad
   logical :: pdb,tinker,xyz,moldy,rests,writebad,writexyz
   logical :: add_amber_ter, add_box_sides
-  logical :: movebadprint, hasbad, movebadrandom
+  logical :: movebadprint, hasbad, movebadrandom, quit
   logical :: thisisfixed(maxtype), changechains(maxtype)
 
   ! Start time computation
@@ -108,7 +123,7 @@ program packmol
       
   ! Reading input file
 
-  call getinp(dism,precision,sidemax,&
+  call getinp(unit,dism,precision,sidemax,&
               ntype,nlines,nrest,&
               natoms,idfirst,nconnect,maxcon,nmols,&
               isem,&
@@ -137,7 +152,8 @@ program packmol
   if(ntotat.gt.maxatom) then
     write(*,*)' ERROR: Total number of atoms greater than maxatom.'
     write(*,*)'        Change the maxatom (sizes.f90 file) '
-    stop
+    stat = 6
+    return
   end if
 
   ! Setting the vector that contains the default tolerance
@@ -170,7 +186,8 @@ program packmol
           read(keyword(iline,2),*,iostat=ioerr) rad
           if ( ioerr /= 0 ) then
             write(*,*) ' ERROR: Could not read radius from keyword. '
-            stop
+            stat = 7
+            return
           end if
           iicart = icart
           do imol = 1, nmols(itype)
@@ -210,7 +227,8 @@ program packmol
           read(keyword(iline,2),*,iostat=ioerr) rad
           if ( ioerr /= 0 ) then
             write(*,*) ' ERROR: Could not read radius from keyword. '
-            stop
+            stat = 7
+            return
           end if
           ival = 2
           do
@@ -219,7 +237,8 @@ program packmol
             if ( iat > natoms(itype) ) then
               write(*,*) ' ERROR: atom selection with index greater than number of '
               write(*,*) '        atoms in structure ', itype
-              stop
+              stat = 8
+              return
             end if
             radius(icart+iat) = rad
             ival = ival + 1
@@ -283,7 +302,8 @@ program packmol
           if(nmols(itype).gt.1) then
             write(*,*)' ERROR: You cannot set number > 1',&
                       ' for fixed molecules. '
-            stop
+            stat = 4
+            return
           end if
         end if
       end do
@@ -441,7 +461,8 @@ program packmol
       if(.not.rests) then
         write(*,*) ' ERROR: Some molecule has no geometrical',&
                    ' restriction defined: nothing to do.'
-        stop
+        stat = 5
+        return
       end if
     end do
   end do
@@ -515,7 +536,8 @@ program packmol
     write(*,*) ' The output file contains the fixed molecule '
     write(*,*) ' in the desired position. '
     write(*,dash1_line)
-    stop
+    stat = 0
+    return
   end if
   
   !
@@ -524,7 +546,16 @@ program packmol
 
   call initial(isem,randini,x,n,ntfix,fix,moldy,&
                chkgrad,nloop,discale,precision,sidemax,&
-               movefrac,movebadrandom,check)
+               movefrac,movebadrandom,check,quit)
+
+  if (quit) then
+    if (chkgrad) then
+      stat = 2
+    else
+      stat = 3
+    end if
+    return
+  end if
 
   ! Computing the energy at the initial point
 
@@ -551,7 +582,8 @@ program packmol
                 input_itype,thisisfixed,changechains)
     write(*,*) ' Wrote initial point to output file: ',&
                xyzout(1:charl(xyzout)) 
-    stop
+    stat = 0
+    return
   end if
 
   !
@@ -677,7 +709,8 @@ program packmol
                         movefrac,movebadrandom,precision,isem,resnumbers,&
                         add_amber_ter,add_box_sides,add_sides_fix,&
                         input_itype,thisisfixed,changechains)
-        stop
+        stat = 1
+        return
       end if
 
       write(*,"( /, 17('-'),' Starting GENCAN loop(',i4,') ',17('-'),/&
@@ -802,7 +835,8 @@ program packmol
        ' Journal of Computational Chemistry, 30:2157-2164,2009.',&
             /,/,62('#'),/ )" ) bestf, fdist, frest
           write(*,*) '  Running time: ', etime(tarray) - time0,' seconds. ' 
-          stop 
+          stat = 0
+          return
         end if
       end if
 
@@ -825,4 +859,4 @@ program packmol
 
   end do main
 
-end program packmol
+end subroutine packmol
