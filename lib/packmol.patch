diff -rupN original/io.f packmol/io.f
--- packmol/io.f	2013-08-31 07:46:31.000000000 -0300
+++ packmol/io.f	2014-10-18 14:01:00.058489570 -0300
@@ -14,7 +14,7 @@ c
 c
 c
 
-      subroutine getinp(dism,precision,sidemax,
+      subroutine getinp(inp,dism,precision,sidemax,
      +                  ntype,nlines,nrest,
      +                  natoms,idfirst,nconnect,maxcon,nmols,
      +                  isem,
@@ -36,7 +36,7 @@ c
      +                 discale, movefrac, precision, add_sides_fix,
      +                 sidemax
 
-      integer i, j, k, ii, iarg, iline, nlines, idatom, iatom, 
+      integer inp, i, j, k, ii, iarg, iline, nlines, idatom, iatom, 
      +        in, lixo, irest, itype, itest, isem, imark, ntype, nrest, 
      +        nmols(maxtype), natoms(maxtype), idfirst(maxtype),
      +        ityperest(maxrest), irestline(maxrest), 
@@ -47,7 +47,7 @@ c
       character*200 inputfile(maxlines), keyword(maxlines,maxkeywords), 
      +              record, blank, xyzout, name(maxtype)
       character*80 pdbfile(maxtype)
-      character*3 ele(maxatom)
+      character*30 ele(maxatom)
 
       logical tinker,pdb,xyz,moldy, error, ignore, randini, check, 
      +        chkgrad, writebad, add_amber_ter, add_box_sides
@@ -75,7 +75,7 @@ c Getting input lines from the input fil
       write(*,*) ' Reading input file... (Control-C aborts)'
       nlines = 0
       do while (.true.)
-        read(5,1000,err=10,end=10) record
+        read(inp,1000,err=10,end=10) record
 
 c Checking if the line is empty or if it is a commentary
 
@@ -855,7 +855,7 @@ c
       character chain
       character*200 record
       character*64 title
-      character*3 ele(maxatom)
+      character*30 ele(maxatom)
       character*200 name(maxtype)
       character*80 pdbfile(maxtype)
       character*200 xyzout
@@ -903,7 +903,7 @@ c Write the output (xyz file)
      +                        coor(idatom,3),
      +                        v1,v2,v3) 
                 write(30, 910) ele(idatom), (xcart(icart, k), k = 1, 3)
-910             format(tr2,a3,tr2,3(tr2,f14.6))
+910             format(tr2,a,tr2,3(tr2,f14.6))
               end do 
               ilugan = ilugan + 3 
               ilubar = ilubar + 3 
@@ -1529,7 +1529,7 @@ c
       integer nloop, isem
       integer input_itype(maxtype)
 
-      character*3 ele(maxatom)
+      character*30 ele(maxatom)
       character*80 pdbfile(maxtype) 
       character*200 xyzout
       character*200 name(maxtype)
 
diff -rupN original/main.f packmol/main.f
--- packmol/main.f	1969-12-31 21:00:00.000000000 -0300
+++ packmol/main.f	2014-10-18 14:01:00.058489570 -0300
@@ -0,0 +1,4 @@
+       program main
+       integer stat
+       call packmol( 5, stat )
+       end program main
diff -rupN original/Makefile packmol/Makefile
--- packmol/Makefile	2014-03-12 18:25:02.000000000 -0300
+++ packmol/Makefile	2014-10-18 14:01:00.058489570 -0300
@@ -1,4 +1,3 @@
-# configure generated Makefile
 #
 # Makefile for Packmol: Read the comments if you have some
 #                       problem while compiling.
@@ -19,7 +18,7 @@
 # below to the path of your fortran compiler. The parallel version
 # must be compiled with gfortran version 4.2 or greater. 
 #
-FORTRAN = /usr/bin/gfortran
+FORTRAN = gfortran
 #
 FORTRAN_PARALLEL = gfortran 
 #
@@ -35,6 +34,7 @@ FORTRAN_PARALLEL = gfortran
 #
 # Change the flags of the compilation if you want:
 #
+ 
 SERIALFLAGS = -O3 -ffast-math 
 #
 # Flags for the compilation of the parallel version
@@ -49,14 +49,16 @@ PARALLELFLAGS = -O3 -ffast-math -fopenmp
 #
 # Get the default fortran compiler
 #
+ 
 ifeq ($(FORTRAN),AUTO)
 FORTRAN = $(FC)
 endif 
 #
 # Files required
 #
-srcall = cenmass.f gencan.f initial.f io.f fgcommon.f packmolnew.f \
-         polartocart.f heuristics.f  
+srclib = cenmass.f gencan.f initial.f io.f fgcommon.f packmolnew.f \
+         polartocart.f heuristics.f
+srcall = $(srclib) main.f
 srcserial = feasy.f geasy.f
 srcparallel = feasyparallel.f geasyparallel.f compindexes.f
 commons = Makefile sizes.i gencan.i molpa.i
@@ -70,7 +72,20 @@ serial : $(srcall) $(srcserial) $(common
 	@echo " ------------------------------------------------------ " 
 	@$(FORTRAN) $(SERIALFLAGS) $(srcall) $(srcserial) -o packmol
 	@chmod +x solvate.tcl 
-	@echo " Packmol succesfully built." 
+	@echo " Packmol successfully built." 
+	@echo " ------------------------------------------------------ " 
+#
+# Compiling the serial static library version
+#
+lib : $(srlib) $(srcserial) $(commons)
+	@echo " ------------------------------------------------------ " 
+	@echo " Compiling packmol with $(FORTRAN) " 
+	@echo " Flags: $(SERIALFLAGS) " 
+	@echo " ------------------------------------------------------ " 
+	@$(FORTRAN) $(SERIALFLAGS) $(srclib) $(srcserial) -c
+	@ar cr libpackmol.a $(srclib:.f=.o) $(srcserial:.f=.o)
+	@chmod +x solvate.tcl 
+	@echo " Packmol static library successfully built." 
 	@echo " ------------------------------------------------------ " 
 #
 # Compiling the parallel version: under development.
@@ -85,7 +100,7 @@ parallel : $(srcall) $(srcparallel) $(co
 	@chmod +x ppackmol
 	@chmod +x solvate.tcl 
 	@echo " ------------------------------------------------------ " 
-	@echo " Packmol succesfully built. Paralell version available. " 
+	@echo " Packmol successfully built. Paralell version available. " 
 	@echo " ------------------------------------------------------ " 
 #
 # Compiling with flags for development
@@ -98,5 +113,5 @@ devel : $(srcall) $(srcserial) $(srcpara
 	@$(FORTRAN) -Wunused $(srcall) $(srcserial) -o packmol
 	@chmod +x solvate.tcl 
 	@echo " ------------------------------------------------------ " 
-	@echo " Packmol succesfully built. " 
+	@echo " Packmol successfully built. " 
 	@echo " ------------------------------------------------------ " 
diff -rupN original/Makefile.default packmol/Makefile.default
--- packmol/Makefile.default	2009-05-11 14:49:06.000000000 -0300
+++ packmol/Makefile.default	2014-10-18 14:01:00.054489570 -0300
@@ -56,8 +56,9 @@ endif
 #
 # Files required
 #
-srcall = cenmass.f gencan.f initial.f io.f fgcommon.f packmolnew.f \
-         polartocart.f heuristics.f  
+srclib = cenmass.f gencan.f initial.f io.f fgcommon.f packmolnew.f \
+         polartocart.f heuristics.f
+srcall = $(srclib) main.f
 srcserial = feasy.f geasy.f
 srcparallel = feasyparallel.f geasyparallel.f compindexes.f
 commons = Makefile sizes.i gencan.i molpa.i
@@ -70,7 +71,21 @@ serial : $(srcall) $(srcserial) $(common
 	@echo " Flags: $(SERIALFLAGS) " 
 	@echo " ------------------------------------------------------ " 
 	@$(FORTRAN) $(SERIALFLAGS) $(srcall) $(srcserial) -o packmol
-	@echo " Packmol succesfully built." 
+	@chmod +x solvate.tcl 
+	@echo " Packmol successfully built." 
+	@echo " ------------------------------------------------------ " 
+#
+# Compiling the serial static library version
+#
+lib : $(srlib) $(srcserial) $(commons)
+	@echo " ------------------------------------------------------ " 
+	@echo " Compiling packmol with $(FORTRAN) " 
+	@echo " Flags: $(SERIALFLAGS) " 
+	@echo " ------------------------------------------------------ " 
+	@$(FORTRAN) $(SERIALFLAGS) $(srclib) $(srcserial) -c
+	@ar cr libpackmol.a $(srclib:.f=.o) $(srcserial:.f=.o)
+	@chmod +x solvate.tcl 
+	@echo " Packmol static library successfully built." 
 	@echo " ------------------------------------------------------ " 
 #
 # Compiling the parallel version: under development.
@@ -83,8 +98,9 @@ parallel : $(srcall) $(srcparallel) $(co
 	@$(FORTRAN_PARALLEL) $(PARALLELFLAGS) $(srcall) $(srcparallel)\
                            -o packmol
 	@chmod +x ppackmol
+	@chmod +x solvate.tcl 
 	@echo " ------------------------------------------------------ " 
-	@echo " Packmol succesfully built. Paralell version available. " 
+	@echo " Packmol successfully built. Paralell version available. " 
 	@echo " ------------------------------------------------------ " 
 #
 # Compiling with flags for development
@@ -95,6 +111,7 @@ devel : $(srcall) $(srcserial) $(srcpara
 	@echo " Flags: -Wunused"
 	@echo " ------------------------------------------------------ "
 	@$(FORTRAN) -Wunused $(srcall) $(srcserial) -o packmol
+	@chmod +x solvate.tcl 
 	@echo " ------------------------------------------------------ " 
-	@echo " Packmol succesfully built. " 
+	@echo " Packmol successfully built. " 
 	@echo " ------------------------------------------------------ " 
diff -rupN original/packmolnew.f packmol/packmolnew.f
--- packmol/packmolnew.f	2014-08-13 15:05:11.000000000 -0300
+++ packmol/packmolnew.f	2014-10-18 14:01:00.054489570 -0300
@@ -39,13 +39,22 @@ c http://www.ime.usp.br/~egbirgin/tango
 c
 c
 
-      program packmol
+      subroutine packmol( inp, stat )
+
+c     Returned stat values:
+c
+c     0 - Mission accomplished.
+c     1 - Maximum loops achieved -> best solution written to output file
+c     2 - Number of some fixed molecule is greater than one -> Aborted.
+c     3 - Some molecule has no geometrical restriction defined -> Aborted.
+c     4 - Total number of atoms greater than maxatom -> Aborted.
 
       implicit none
       include 'sizes.i'
       include 'molpa.i'
       include 'gencan.i'
 
+      integer inp, stat
       integer irestline(maxrest)
       integer linestrut(maxtype,2)
       integer itype, nrest, irest, idatom, iatom
@@ -83,7 +92,7 @@ c      integer iargc, narg, charl, write
       character*200 record
       character*200 name(maxtype)
       character*80 pdbfile(maxtype), xyzfile
-      character*3 ele(maxatom)
+      character*30 ele(maxatom)
       character*200 xyzout        
 
       logical fix,fixed(maxtype),fixtmp,randini,check,chkgrad
@@ -126,7 +135,7 @@ c Printing title
 
 c Reading input file
 
-      call getinp(dism,precision,sidemax,
+      call getinp(inp,dism,precision,sidemax,
      +            ntype,nlines,nrest,
      +            natoms,idfirst,nconnect,maxcon,nmols,
      +            isem,
@@ -157,7 +166,8 @@ c Computing the total number of atoms
       if(ntotat.gt.maxatom) then
         write(*,*)' ERROR: Total number of atoms greater than maxatom.'
         write(*,*)'        Change the maxatom (sizes.i file) '
-        stop
+        stat = 4
+        return
       end if
 
 c Put fixed molecules in the specified position
@@ -205,12 +215,13 @@ c Compute rotation matrix from euler ang
               if(nmols(itype).gt.1) then
                 write(*,*)' ERROR: You cannot set number > 1',
      +                    ' for fixed molecules. '
-                stop
+                stat = 2
+                return
               end if
             end if
           end do
         end if
-      end do 
+      end do
 
 c Reseting parameters for removing the fixed molecules
 
@@ -362,7 +373,8 @@ c Setting the array that contains the re
           if(.not.rests) then
             write(*,*) ' ERROR: Some molecule has no geometrical',
      +                 ' restriction defined: nothing to do.'
-            stop
+            stat = 3
+            return
           end if
         end do
       end do
@@ -436,7 +448,8 @@ c If there are no variables (only fixed
         write(*,*) ' The output file contains the fixed molecule '
         write(*,*) ' in the desired position. '
         write(*,908)
-        stop
+        stat = 0
+        return
       end if
   
 c
@@ -470,7 +483,8 @@ c Computing the energy at the initial po
      +              input_itype,thisisfixed)
         write(*,*) ' Wrote initial point to output file: ',
      +             xyzout(1:charl(xyzout)) 
-        stop
+        stat = 0
+        return
       end if
 
 c
@@ -589,7 +603,8 @@ c Moving bad molecules
      +                    movefrac,precision,isem,resnumbers,
      +                    add_amber_ter,add_box_sides,add_sides_fix,
      +                    input_itype,thisisfixed)
-          stop
+          stat = 1
+          return
         end if
 
         write(*,905) loop, dism   
@@ -705,7 +720,8 @@ c When the solution is found, print succ
             write(*,909) bestf, dsqrt(fdist), frest
             write(*,*) '  Running time: ', 
      +                    etime(tarray) - time0,' seconds. ' 
-            stop 
+            stat = 0
+            return
           end if
         end if
 
